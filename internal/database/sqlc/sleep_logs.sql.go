// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sleep_logs.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSleepLog = `-- name: CreateSleepLog :one
INSERT INTO sleep_logs (id, user_id, start_time, end_time, quality)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, start_time, end_time, quality, created_at
`

type CreateSleepLogParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	Quality   string    `json:"quality"`
}

func (q *Queries) CreateSleepLog(ctx context.Context, arg CreateSleepLogParams) (SleepLog, error) {
	row := q.db.QueryRow(ctx, createSleepLog,
		arg.ID,
		arg.UserID,
		arg.StartTime,
		arg.EndTime,
		arg.Quality,
	)
	var i SleepLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSleepLogByID = `-- name: DeleteSleepLogByID :exec
DELETE FROM sleep_logs
WHERE id = $1 AND user_id = $2
`

type DeleteSleepLogByIDParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteSleepLogByID(ctx context.Context, arg DeleteSleepLogByIDParams) error {
	_, err := q.db.Exec(ctx, deleteSleepLogByID, arg.ID, arg.UserID)
	return err
}

const getSleepLogCountByUserID = `-- name: GetSleepLogCountByUserID :one
SELECT COUNT(*)
FROM sleep_logs
WHERE user_id = $1
`

func (q *Queries) GetSleepLogCountByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getSleepLogCountByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSleepLogsByUserID = `-- name: GetSleepLogsByUserID :many
SELECT id, user_id, start_time, end_time, quality, created_at
FROM sleep_logs
WHERE user_id = $1
order by start_time desc
LIMIT $2
OFFSET $3
`

type GetSleepLogsByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetSleepLogsByUserID(ctx context.Context, arg GetSleepLogsByUserIDParams) ([]SleepLog, error) {
	rows, err := q.db.Query(ctx, getSleepLogsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SleepLog{}
	for rows.Next() {
		var i SleepLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartTime,
			&i.EndTime,
			&i.Quality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
